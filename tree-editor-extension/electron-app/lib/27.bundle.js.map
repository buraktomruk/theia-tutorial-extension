{"version":3,"sources":["webpack:///../node_modules/@theia/core/src/browser/window/default-window-service.ts","webpack:///../node_modules/@theia/core/src/electron-browser/electron-clipboard-service.ts","webpack:///../node_modules/@theia/core/src/electron-browser/window/electron-window-module.ts","webpack:///../node_modules/@theia/core/src/electron-browser/window/electron-window-service.ts","webpack:///../node_modules/@theia/core/src/electron-common/electron-main-window-service.ts"],"names":[],"mappings":"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","file":"27.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, named } from 'inversify';\nimport { Event, Emitter } from '../../common';\nimport { CorePreferences } from '../core-preferences';\nimport { ContributionProvider } from '../../common/contribution-provider';\nimport { FrontendApplicationContribution, FrontendApplication } from '../frontend-application';\nimport { WindowService } from './window-service';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n    protected frontendApplication: FrontendApplication;\n\n    protected onUnloadEmitter = new Emitter<void>();\n    get onUnload(): Event<void> {\n        return this.onUnloadEmitter.event;\n    }\n\n    @inject(CorePreferences)\n    protected readonly corePreferences: CorePreferences;\n\n    @inject(ContributionProvider)\n    @named(FrontendApplicationContribution)\n    protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n    onStart(app: FrontendApplication): void {\n        this.frontendApplication = app;\n        this.registerUnloadListeners();\n    }\n\n    openNewWindow(url: string): undefined {\n        window.open(url, undefined, 'noopener');\n        return undefined;\n    }\n\n    canUnload(): boolean {\n        const confirmExit = this.corePreferences['application.confirmExit'];\n        let preventUnload = confirmExit === 'always';\n        for (const contribution of this.contributions.getContributions()) {\n            if (contribution.onWillStop?.(this.frontendApplication)) {\n                preventUnload = true;\n            }\n        }\n        return confirmExit === 'never' || !preventUnload;\n    }\n\n    /**\n     * Implement the mechanism to detect unloading of the page.\n     */\n    protected registerUnloadListeners(): void {\n        window.addEventListener('beforeunload', event => {\n            if (!this.canUnload()) {\n                return this.preventUnload(event);\n            }\n        });\n        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n        // If the user stays, the page won't be unloaded, so `unload` is not fired.\n        // If the user leaves, the page will be unloaded, so `unload` is fired.\n        window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n    }\n\n    /**\n     * Notify the browser that we do not want to unload.\n     *\n     * Notes:\n     *  - Shows a confirmation popup in browsers.\n     *  - Prevents the window from closing without confirmation in electron.\n     *\n     * @param event The beforeunload event\n     */\n    protected preventUnload(event: BeforeUnloadEvent): string | void {\n        event.returnValue = '';\n        event.preventDefault();\n        return '';\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { clipboard } from 'electron';\nimport { injectable } from 'inversify';\nimport { ClipboardService } from '../browser/clipboard-service';\n\n@injectable()\nexport class ElectronClipboardService implements ClipboardService {\n\n    readText(): string {\n        return clipboard.readText();\n    }\n\n    writeText(value: string): void {\n        clipboard.writeText(value);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { WindowService } from '../../browser/window/window-service';\nimport { ElectronWindowService } from './electron-window-service';\nimport { FrontendApplicationContribution } from '../../browser/frontend-application';\nimport { ElectronClipboardService } from '../electron-clipboard-service';\nimport { ClipboardService } from '../../browser/clipboard-service';\nimport { ElectronMainWindowService, electronMainWindowServicePath } from '../../electron-common/electron-main-window-service';\nimport { ElectronIpcConnectionProvider } from '../messaging/electron-ipc-connection-provider';\n\nexport default new ContainerModule(bind => {\n    bind(ElectronMainWindowService).toDynamicValue(context =>\n        ElectronIpcConnectionProvider.createProxy(context.container, electronMainWindowServicePath)\n    ).inSingletonScope();\n    bind(WindowService).to(ElectronWindowService).inSingletonScope();\n    bind(FrontendApplicationContribution).toService(WindowService);\n    bind(ClipboardService).to(ElectronClipboardService).inSingletonScope();\n});\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { remote } from 'electron';\nimport { NewWindowOptions } from '../../browser/window/window-service';\nimport { DefaultWindowService } from '../../browser/window/default-window-service';\nimport { ElectronMainWindowService } from '../../electron-common/electron-main-window-service';\n\n@injectable()\nexport class ElectronWindowService extends DefaultWindowService {\n\n    /**\n     * Lock to prevent multiple parallel executions of the `beforeunload` listener.\n     */\n    protected isUnloading: boolean = false;\n\n    /**\n     * Close the window right away when `true`, else check if we can unload.\n     */\n    protected closeOnUnload: boolean = false;\n\n    @inject(ElectronMainWindowService)\n    protected readonly delegate: ElectronMainWindowService;\n\n    openNewWindow(url: string, { external }: NewWindowOptions = {}): undefined {\n        this.delegate.openNewWindow(url, { external });\n        return undefined;\n    }\n\n    registerUnloadListeners(): void {\n        window.addEventListener('beforeunload', event => {\n            if (this.isUnloading) {\n                // Unloading process ongoing, do nothing:\n                return this.preventUnload(event);\n            } else if (this.closeOnUnload || this.canUnload()) {\n                // Let the window close and notify clients:\n                delete event.returnValue;\n                this.onUnloadEmitter.fire();\n                return;\n            } else {\n                this.isUnloading = true;\n                // Fix https://github.com/eclipse-theia/theia/issues/8186#issuecomment-742624480\n                // On Electron/Linux doing `showMessageBoxSync` does not seems to block the closing\n                // process long enough and closes the window no matter what you click on (yes/no).\n                // Instead we'll prevent closing right away, ask for confirmation and finally close.\n                setTimeout(() => {\n                    if (this.shouldUnload()) {\n                        this.closeOnUnload = true;\n                        window.close();\n                    }\n                    this.isUnloading = false;\n                });\n                return this.preventUnload(event);\n            }\n        });\n    }\n\n    /**\n     * When preventing `beforeunload` on Electron, no popup is shown.\n     *\n     * This method implements a modal to ask the user if he wants to quit the page.\n     */\n    protected shouldUnload(): boolean {\n        const electronWindow = remote.getCurrentWindow();\n        const response = remote.dialog.showMessageBoxSync(electronWindow, {\n            type: 'question',\n            buttons: ['Yes', 'No'],\n            title: 'Confirm',\n            message: 'Are you sure you want to quit?',\n            detail: 'Any unsaved changes will not be saved.'\n        });\n        return response === 0; // 'Yes', close the window.\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2020 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { NewWindowOptions } from '../browser/window/window-service';\n\nexport const electronMainWindowServicePath = '/services/electron-window';\nexport const ElectronMainWindowService = Symbol('ElectronMainWindowService');\nexport interface ElectronMainWindowService {\n    openNewWindow(url: string, options?: NewWindowOptions): undefined;\n}\n"],"sourceRoot":""}